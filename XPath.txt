XPath := Expr
Expr := ExprSingle ("," ExprSingle)*
ExprSingle := ForExpr | QuantifiedExpr | IfExpr | OrExpr
ForExpr := SimpleForClause "return" ExprSingle
SimpleForClause := "for" "$" VarName "in" ExprSingle ("," "$" VarName "in" ExprSingle)*
QuantifiedExpr := ("some" | "every") "$" VarName "in" ExprSingle ("," "$" VarName "in" ExprSingle)* "satisfies" ExprSingle
IfExpr := "if" "(" Expr ")" "then" ExprSingle "else" ExprSingle
OrExpr := AndExpr ( "or" AndExpr )*
AndExpr := ComparisonExpr ( "and" ComparisonExpr )*
ComparisonExpr := RangeExpr ( (ValueComp | GeneralComp | NodeComp) RangeExpr )?
RangeExpr := AdditiveExpr ( "to" AdditiveExpr )?
AdditiveExpr := MultiplicativeExpr ( ("+" | "-") MultiplicativeExpr )*
MultiplicativeExpr := UnionExpr ( ("*" | "div" | "idiv" | "mod") UnionExpr )*
UnionExpr := IntersectExceptExpr ( ("union" | "|") IntersectExceptExpr )*
IntersectExceptExpr := InstanceofExpr ( ("intersect" | "except") InstanceofExpr )*
InstanceofExpr := TreatExpr ( "instance" "of" SequenceType )?
TreatExpr := CastableExpr ( "treat" "as" SequenceType )?
CastableExpr := CastExpr ( "castable" "as" SingleType )?
CastExpr := UnaryExpr ( "cast" "as" SingleType )?
UnaryExpr := ("-" | "+")* ValueExpr
ValueExpr := PathExpr
GeneralComp := "=" | "!=" | "<" | "<=" | ">" | ">="
ValueComp := "eq" | "ne" | "lt" | "le" | "gt" | "ge"
NodeComp := "is" | "<<" | ">>"
PathExpr := ("/" RelativePathExpr?) | ("//" RelativePathExpr) | RelativePathExpr  /* xgs: leading-lone-slash */
RelativePathExpr := StepExpr (("/" | "//") StepExpr)*
StepExpr := FilterExpr | AxisStep
AxisStep := (ReverseStep | ForwardStep) PredicateList
ForwardStep := (ForwardAxis NodeTest) | AbbrevForwardStep
ForwardAxis := ("child" "::") | ("descendant" "::") | ("attribute" "::") | ("self" "::") | ("descendant-or-self" "::") | ("following-sibling" "::") | ("following" "::") | ("namespace" "::")
AbbrevForwardStep := "@"? NodeTest
ReverseStep := (ReverseAxis NodeTest) | AbbrevReverseStep
ReverseAxis := ("parent" "::") | ("ancestor" "::") | ("preceding-sibling" "::") | ("preceding" "::") | ("ancestor-or-self" "::")
AbbrevReverseStep := ".."
NodeTest := KindTest | NameTest
NameTest := QName | Wildcard
Wildcard := "*" | (NCName ":" "*") | ("*" ":" NCName)  /* ws: explicit */
FilterExpr := PrimaryExpr PredicateList
PredicateList := Predicate*
Predicate := "[" Expr "]"
PrimaryExpr := Literal | VarRef | ParenthesizedExpr | ContextItemExpr | FunctionCall
Literal := NumericLiteral | StringLiteral
NumericLiteral := IntegerLiteral | DecimalLiteral | DoubleLiteral
VarRef := "$" VarName
VarName := QName
ParenthesizedExpr := "(" Expr? ")"
ContextItemExpr := "."
FunctionCall := QName "(" (ExprSingle ("," ExprSingle)*)? ")" /* xgs: reserved-function-names, gn: parens */
SingleType := AtomicType "?"?
SequenceType := ("empty-sequence" "(" ")") | (ItemType OccurrenceIndicator?)
OccurrenceIndicator := "?" | "*" | "+" /* xgs: occurrence-indicators */
ItemType := KindTest | ("item" "(" ")") | AtomicType
AtomicType := QName
KindTest := DocumentTest | ElementTest | AttributeTest | SchemaElementTest | SchemaAttributeTest | PITest | CommentTest | TextTest | AnyKindTest
AnyKindTest := "node" "(" ")"
DocumentTest := "document-node" "(" (ElementTest | SchemaElementTest)? ")"
TextTest := "text" "(" ")"
CommentTest := "comment" "(" ")"
PITest := "processing-instruction" "(" (NCName | StringLiteral)? ")"
AttributeTest := "attribute" "(" (AttribNameOrWildcard ("," TypeName)?)? ")"
AttribNameOrWildcard := AttributeName | "*"
SchemaAttributeTest := "schema-attribute" "(" AttributeDeclaration ")"
AttributeDeclaration := AttributeName
ElementTest := "element" "(" (ElementNameOrWildcard ("," TypeName "?"?)?)? ")"
ElementNameOrWildcard := ElementName | "*"
SchemaElementTest := "schema-element" "(" ElementDeclaration ")"
ElementDeclaration := ElementName
AttributeName := QName
ElementName := QName
TypeName := QName
IntegerLiteral := Digits
DecimalLiteral := ("." Digits) | (Digits "." [0-9]*)  /* ws: explicit */
DoubleLiteral := (("." Digits) | (Digits ("." [0-9]*)?)) [eE] [+-]? Digits /* ws: explicit */
StringLiteral := (["] (EscapeQuot | [^"])* ["]) | (['] (EscapeApos | [^'])* [']) /* ws: explicit */
EscapeQuot := ["] ["]
EscapeApos := ['] [']
Comment := "(:" CommentChars ":)"  /* ws: explicit, gn: comments */
CommentChars := [^:(]
CommentChars := ":" [^(]
CommentChars := "(" [^:]
CommentContent := CommentChars
CommentContent := CommentContent CommentChars  
QName := (Name ":" Name) | Name
Name := NameStartChar (NameChar)*
NameStartChar := [A-Z] | "_" | [a-z] | [#xC0-#xD6] | [#xD8-#xF6] | [#xF8-#x2FF] | [#x370-#x37D] | [#x37F-#x1FFF] | [#x200C-#x200D] | [#x2070-#x218F] | [#x2C00-#x2FEF] | [#x3001-#xD7FF] | [#xF900-#xFDCF] | [#xFDF0-#xFFFD] | [#x10000-#xEFFFF]
NameChar := NameStartChar | "-" | "." | [0-9] | [#xB7] | [#x0300-#x036F] | [#x203F-#x2040]
Char := [#x9] | [#xA] | [#xD] | [#x20-#xD7FF] | [#xE000-#xFFFD] | [#x10000-#x10FFFF]  /* any Unicode character, excluding the surrogate blocks, FFFE, and FFFF. */
Digits := [0-9]+
